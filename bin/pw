#!/usr/bin/env bash

# Encrypted password management script by Julian Thatcher
# Date: 17/08/15
#
# Manages passwords.txt.gpg. The user will be asked to input their symmetric
# key for encryption and decryption.
#
# Operations:
# pw clean              Clean intermediate files
# pw atlassian          Search for "atlassian" in password file
# pw search atlassian   Same as above
# pw -- clean           Consider the rest of the line to be searches, not commands
# pw -c NameOfService   Create a new service and open $VISUAL on the file
# pw edit               Edit the passwords file
# pw encrypt            Encrypt the passwords file
# pw commit "Message"   Commit the pending changes to git
# pw push               Push the pending changes
# pw status             Display status
# pw list               Display passwords
#
# Operations can be combined, and are run sequentially.
# Eg:
#  pw atlassian -c BitBucket commit "BitBucket account" push clean
#
#  This would show password matches for "atlassian"; create a new password
#  named BitBucket and open $VISUAL to allow you to add your password; then
#  a new commit would be added for the encrypted file
#  (message "BitBucket account"); push commits to origin; and finally clean
#  up intermediate files.
#
#

PWFILE=passwords.txt
PWENC="$PWFILE.gpg"
GREP_OPTS="-i --color"
GPG_ENC_OPTS="--yes"
GPG_DEC_OPTS=""
PUSHD_OPTS="-n"

ERR_MISSING=10      # PWFILE is missing
ERR_ENC=11          # Error encrypting with gpg
ERR_COMMIT=12       # Error committing to git
ERR_PUSHD=13        # Error finding base directory

editor=`which $VISUAL`
if [ "$editor"x == "x" ]; then
	editor=$EDITOR
fi

if [ ! -x "$editor" ]; then
	vi=`/usr/bin/which vi`
	echo "VISUAL/EDITOR '$editor' not found, falling back to '$vi'"
	editor=$vi
fi

decrypt () {
	if [ ! -f $PWFILE ]; then
		gpg $GPG_DEC_OPTS $PWENC
	fi
}

encrypt () {
	if [ ! -f $PWFILE ]; then
		echo "Missing $PWFILE"
		quit $ERR_MISSING
	fi
	gpg $GPG_ENC_OPTS -c $PWFILE
	if [ "$?" == "0" ]; then
		cleanup
	else
		echo "Error encrypting"
		quit $ERR_ENC
	fi
}

append () {
	decrypt
	echo $1 >> $PWFILE
}

edit () {
	decrypt
	$editor $PWFILE
}

cleanup () {
	if [ -f $PWFILE ]; then
		rm $PWFILE
	fi
}

search () {
	decrypt
	grep $GREP_OPTS $1 $PWFILE
}

show_status () {
	git status
}

list () {
	decrypt
	cat $PWFILE
}

quit () {
	# Restore previous directory
	popd > /dev/null
	exit $1
}

do_cmds=1

# Figure out where PWFILE exists and move to it
base=`readlink -f $0`
base=`dirname $base`
base=`readlink -f $base/../`
pushd $base > /dev/null
if [ "$?" != "0" ]; then
	echo "Error moving to $base"
	exit $ERR_PUSHD
fi

# Main processing loop
while (( "$#" )); do
	if [ "$do_cmds" == "1" ]; then
		if [ "$1" == "-c" ]; then
			# Create
			shift
			append "$1 - "
			edit
		elif [ "$1" == "edit" ]; then
			edit
		elif [ "$1" == "encrypt" ]; then
			encrypt
		elif [ "$1" == "clean" ]; then
			echo "Cleaning up state"
			cleanup
		elif [ "$1" == "search" ]; then
			shift
			search $1
		elif [ "$1" == "commit" ]; then
			encrypt
			shift
			git commit -a -m "$1"
			if [ "$?" != "0" ]; then
				echo "Error committing result, aborting cleanup"
				quit $ERR_COMMIT
			fi
			cleanup
		elif [ "$1" == "push" ]; then
			git push
			if [ "$?" != "0" ]; then
				echo "Error pushing to remote"
				quit $ERR_PUSH
			fi
			cleanup
		elif [ "$1" == "status" ]; then
			show_status
		elif [ "$1" == "list" ]; then
			list
		elif [ "$1" == "--" ]; then
			do_cmds=0
		else
			search $1
		fi
	else
		search $1
	fi
	shift
done

quit 0
